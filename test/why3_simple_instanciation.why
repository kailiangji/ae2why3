theory SIMPLE_INSTANCIATION


use import Tuple0

axiom tUple0_inversion:
   (forall u : tuple0.
   u = Tuple0)

type unit1 

type qtmark 

function at 'a qtmark : 'a

function old 'a : 'a

use import bool.Bool

use import int.Int

function index_bool bool : int

axiom index_bool_True:
   (index_bool true) = 0

axiom index_bool_False:
   (index_bool false) = 1

axiom bool_inversion:
   (forall u : bool.
   (u = true \/
    u = false))

use import floating_point.Single as S

use import floating_point.Rounding

function match_fpa_rounding_mode mode 'a 'a 'a 'a 'a : 'a

axiom match_fpa_rounding_mode_NearestTiesToEven:
   (forall z : 'a.
   (forall z1 : 'a.
   (forall z2 : 'a.
   (forall z3 : 'a.
   (forall z4 : 'a.
   (match_fpa_rounding_mode NearestTiesToEven z z1 z2 z3 z4) = z)))))

axiom match_fpa_rounding_mode_ToZero:
   (forall z : 'a.
   (forall z1 : 'a.
   (forall z2 : 'a.
   (forall z3 : 'a.
   (forall z4 : 'a.
   (match_fpa_rounding_mode ToZero z z1 z2 z3 z4) = z1)))))

axiom match_fpa_rounding_mode_Up:
   (forall z : 'a.
   (forall z1 : 'a.
   (forall z2 : 'a.
   (forall z3 : 'a.
   (forall z4 : 'a.
   (match_fpa_rounding_mode Up z z1 z2 z3 z4) = z2)))))

axiom match_fpa_rounding_mode_Down:
   (forall z : 'a.
   (forall z1 : 'a.
   (forall z2 : 'a.
   (forall z3 : 'a.
   (forall z4 : 'a.
   (match_fpa_rounding_mode Down z z1 z2 z3 z4) = z3)))))

axiom match_fpa_rounding_mode_NearTiesToAway:
   (forall z : 'a.
   (forall z1 : 'a.
   (forall z2 : 'a.
   (forall z3 : 'a.
   (forall z4 : 'a.
   (match_fpa_rounding_mode NearestTiesToAway z z1 z2 z3 z4) = z4)))))

function index_fpa_rounding_mode mode : int

axiom index_fpa_rounding_mode_NearestTiesToEven:
   (index_fpa_rounding_mode NearestTiesToEven) = 0

axiom index_fpa_rounding_mode_ToZero:
   (index_fpa_rounding_mode ToZero) = 1

axiom index_fpa_rounding_mode_Up:
   (index_fpa_rounding_mode Up) = 2

axiom index_fpa_rounding_mode_Down:
   (index_fpa_rounding_mode Down) = 3

axiom index_fpa_rounding_mode_NearTiesToAway:
   (index_fpa_rounding_mode NearestTiesToAway) = 4

axiom fpa_rounding_mode_inversion:
   (forall u : mode.
   ((((u = NearestTiesToEven \/
    u = ToZero) \/
    u = Up) \/
    u = Down) \/
    u = NearestTiesToAway))

use import real.RealInfix

use import floating_point.Double as D

predicate zwf_zero (a : int) (b : int) =
   (0 <= b /\
    a < b)

type alloc_table 't 

type pointer 't 

type block 't 

function base_block (pointer 't) : block 't

function offset_max (alloc_table 't) (pointer 't) : int

function offset_min (alloc_table 't) (pointer 't) : int

predicate valid (a : alloc_table 't) (p : pointer 't) =
   ((offset_min a p) <= 0 /\
    0 <= (offset_max a p))

predicate same_block (p : pointer 't) (q : pointer 't) =
   (base_block p) = (base_block q)

function sub_pointer (pointer 't) (pointer 't) : int

function shift (pointer 't) int : pointer 't

constant null : pointer 't

function pointer_address (pointer 't) : pointer tuple0

function absolute_address int : pointer tuple0

function address (pointer 't) : int

axiom address_injective:
   (forall p : pointer 't.
   (forall q : pointer 't.
   (p = q ->
    (address p) = (address q))))

axiom address_injective1:
   (forall p : pointer 't.
   (forall q : pointer 't.
   ((address p) = (address q) ->
    p = q)))

axiom address_shift_lt:
   (forall p : pointer 't.
   (forall i : int.
   (forall j : int[(address (shift p i)), (address (shift p j))].
   ((address (shift p i)) < (address (shift p j)) ->
    i < j))))

axiom address_shift_lt1:
   (forall p : pointer 't.
   (forall i : int.
   (forall j : int[(address (shift p i)), (address (shift p j))].
   (i < j ->
    (address (shift p i)) < (address (shift p j))))))

axiom address_shift_le:
   (forall p : pointer 't.
   (forall i : int.
   (forall j : int[(address (shift p i)), (address (shift p j))].
   ((address (shift p i)) <= (address (shift p j)) ->
    i <= j))))

axiom address_shift_le1:
   (forall p : pointer 't.
   (forall i : int.
   (forall j : int[(address (shift p i)), (address (shift p j))].
   (i <= j ->
    (address (shift p i)) <= (address (shift p j))))))

axiom shift_zero:
   (forall p : pointer 't[(shift p 0)].
   (shift p 0) = p)

axiom shift_shift:
   (forall p : pointer 't.
   (forall i : int.
   (forall j : int[(shift (shift p i) j)].
   (shift (shift p i) j) = (shift p (i + j)))))

axiom offset_max_shift:
   (forall a : alloc_table 't.
   (forall p : pointer 't.
   (forall i : int.
   (offset_max a (shift p i)) = ((offset_max a p) - i))))

axiom offset_min_shift:
   (forall a : alloc_table 't.
   (forall p : pointer 't.
   (forall i : int.
   (offset_min a (shift p i)) = ((offset_min a p) - i))))

axiom NearestTiesToEvenq_shift:
   (forall p : pointer 't.
   (forall i : int.
   (forall j : int[(shift p i), (shift p j)].
   ((not i = j) ->
    (not (shift p i) = (shift p j))))))

axiom null_not_valid:
   (forall a : alloc_table 't.
   (not (valid a null)))

axiom null_pointer:
   (forall a : alloc_table 't.
   0 <= (offset_min a null))

axiom null_pointer1:
   (forall a : alloc_table 't.
   (offset_max a null) <= (-2))

function eq_pointer_bool (pointer 't) (pointer 't) : bool

function nearestTiesToEvenq_pointer_bool (pointer 't) (pointer 't) : bool

axiom eq_pointer_bool_def:
   (forall p1 : pointer 't.
   (forall p2 : pointer 't.
   ((eq_pointer_bool p1 p2) = true ->
    p1 = p2)))

axiom eq_pointer_bool_def1:
   (forall p1 : pointer 't.
   (forall p2 : pointer 't.
   (p1 = p2 ->
    (eq_pointer_bool p1 p2) = true)))

axiom NearestTiesToEvenq_pointer_bool_def:
   (forall p1 : pointer 't.
   (forall p2 : pointer 't.
   ((nearestTiesToEvenq_pointer_bool p1 p2) = true ->
    (not p1 = p2))))

axiom NearestTiesToEvenq_pointer_bool_def1:
   (forall p1 : pointer 't.
   (forall p2 : pointer 't.
   ((not p1 = p2) ->
    (nearestTiesToEvenq_pointer_bool p1 p2) = true)))

axiom same_block_shift_right:
   (forall p : pointer 't.
   (forall q : pointer 't.
   (forall i : int[(same_block p (shift q i))].
   ((same_block p q) ->
    (same_block p (shift q i))))))

axiom same_block_shift_left:
   (forall p : pointer 't.
   (forall q : pointer 't.
   (forall i : int[(same_block (shift q i) p)].
   ((same_block q p) ->
    (same_block (shift q i) p)))))

axiom sub_pointer_shift:
   (forall p : pointer 't.
   (forall q : pointer 't[(sub_pointer p q)].
   ((same_block p q) ->
    p = (shift q (sub_pointer p q)))))

axiom sub_pointer_self:
   (forall p : pointer 't[(sub_pointer p p)].
   (sub_pointer p p) = 0)

axiom sub_pointer_zero:
   (forall p : pointer 't.
   (forall q : pointer 't[(sub_pointer p q)].
   ((same_block p q) ->
    ((sub_pointer p q) = 0 ->
    p = q))))

axiom sub_pointer_shift_left:
   (forall p : pointer 't.
   (forall q : pointer 't.
   (forall i : int[(sub_pointer (shift p i) q)].
   (sub_pointer (shift p i) q) = ((sub_pointer p q) + i))))

axiom sub_pointer_shift_right:
   (forall p : pointer 't.
   (forall q : pointer 't.
   (forall i : int[(sub_pointer p (shift q i))].
   (sub_pointer p (shift q i)) = ((sub_pointer p q) - i))))

type memory 't 'v 

function select1 (memory 't 'v) (pointer 't) : 'v

function store1 (memory 't 'v) (pointer 't) 'v : memory 't 'v

axiom select_store_eq:
   (forall m : memory 't 'v.
   (forall p1 : pointer 't.
   (forall p2 : pointer 't.
   (forall a : 'v[(store1 m p1 a), p2].
   (p1 = p2 ->
    (select1 (store1 m p1 a) p2) = a)))))

axiom select_store_NearestTiesToEvenq:
   (forall m : memory 't 'v.
   (forall p1 : pointer 't.
   (forall p2 : pointer 't.
   (forall a : 'v[(store1 m p1 a), p2].
   ((not p1 = p2) ->
    (select1 (store1 m p1 a) p2) = (select1 m p2))))))

type pset 't 

constant pset_empty : pset 't

function pset_singleton (pointer 't) : pset 't

function pset_deref (memory 't (pointer 'v)) (pset 't) : pset 'v

function pset_union (pset 't) (pset 't) : pset 't

function pset_all (pset 'z) : pset 'z

function pset_range (pset 't) int int : pset 't

function pset_range_left (pset 'z) int : pset 'z

function pset_range_right (pset 'z) int : pset 'z

function in_pset (pointer 't) (pset 't) : bool

function valid_pset (alloc_table 't) (pset 't) : bool

predicate pset_disjoint (ps1 : pset 't) (ps2 : pset 't) =
   (forall p : pointer 't.
   (not ((in_pset p ps1) /\
    (in_pset p ps2))))

predicate pset_included (ps1 : pset 't) (ps2 : pset 't) =
   (forall p : pointer 't.
   ((in_pset p ps1) ->
    (in_pset p ps2)))

axiom pset_included_self:
   (forall ps : pset 't.
   (pset_included ps ps))

axiom pset_included_range:
   (forall ps : pset 't.
   (forall a : int.
   (forall b : int.
   (forall c : int.
   (forall d : int[(pset_included (pset_range ps a b) (pset_range ps c d))].
   ((c <= a /\
    b <= d) ->
    (pset_included (pset_range ps a b) (pset_range ps c d))))))))

axiom pset_included_range_all:
   (forall ps : pset 't.
   (forall a : int.
   (forall b : int.
   (pset_included (pset_range ps a b) (pset_all ps)))))

axiom in_pset_empty:
   (forall p : pointer 't.
   (not (in_pset p pset_empty)))

axiom in_pset_singleton:
   (forall p : pointer 't.
   (forall q : pointer 't.
   ((in_pset p (pset_singleton q)) ->
    p = q)))

axiom in_pset_singleton1:
   (forall p : pointer 't.
   (forall q : pointer 't.
   (p = q ->
    (in_pset p (pset_singleton q)))))

axiom in_pset_deref:
   (forall p : pointer 'v.
   (forall m : memory 't (pointer 'v).
   (forall q : pset 't.
   ((in_pset p (pset_deref m q)) ->
    (exists r : pointer 't.
   ((in_pset r q) /\
    p = (select1 m r)))))))

axiom in_pset_deref1:
   (forall p : pointer 'v.
   (forall m : memory 't (pointer 'v).
   (forall q : pset 't.
   ((exists r : pointer 't.
   ((in_pset r q) /\
    p = (select1 m r))) ->
    (in_pset p (pset_deref m q))))))

axiom in_pset_all:
   (forall p : pointer 't.
   (forall q : pset 't.
   ((in_pset p (pset_all q)) ->
    (exists i : int.
   (exists r : pointer 't.
   ((in_pset r q) /\
    p = (shift r i)))))))

axiom in_pset_all1:
   (forall p : pointer 't.
   (forall q : pset 't.
   ((exists i : int.
   (exists r : pointer 't.
   ((in_pset r q) /\
    p = (shift r i)))) ->
    (in_pset p (pset_all q)))))

axiom in_pset_range:
   (forall p : pointer 't.
   (forall q : pset 't.
   (forall a : int.
   (forall b : int.
   ((in_pset p (pset_range q a b)) ->
    (exists i : int.
   (exists r : pointer 't.
   (a <= i /\
    (i <= b /\
    ((in_pset r q) /\
    p = (shift r i)))))))))))

axiom in_pset_range1:
   (forall p : pointer 't.
   (forall q : pset 't.
   (forall a : int.
   (forall b : int.
   ((exists i : int.
   (exists r : pointer 't.
   (a <= i /\
    (i <= b /\
    ((in_pset r q) /\
    p = (shift r i)))))) ->
    (in_pset p (pset_range q a b)))))))

axiom in_pset_range_left:
   (forall p : pointer 't.
   (forall q : pset 't.
   (forall b : int.
   ((in_pset p (pset_range_left q b)) ->
    (exists i : int.
   (exists r : pointer 't.
   (i <= b /\
    ((in_pset r q) /\
    p = (shift r i)))))))))

axiom in_pset_range_left1:
   (forall p : pointer 't.
   (forall q : pset 't.
   (forall b : int.
   ((exists i : int.
   (exists r : pointer 't.
   (i <= b /\
    ((in_pset r q) /\
    p = (shift r i))))) ->
    (in_pset p (pset_range_left q b))))))

axiom in_pset_range_right:
   (forall p : pointer 't.
   (forall q : pset 't.
   (forall a : int.
   ((in_pset p (pset_range_right q a)) ->
    (exists i : int.
   (exists r : pointer 't.
   (a <= i /\
    ((in_pset r q) /\
    p = (shift r i)))))))))

axiom in_pset_range_right1:
   (forall p : pointer 't.
   (forall q : pset 't.
   (forall a : int.
   ((exists i : int.
   (exists r : pointer 't.
   (a <= i /\
    ((in_pset r q) /\
    p = (shift r i))))) ->
    (in_pset p (pset_range_right q a))))))

axiom in_pset_union:
   (forall p : pointer 't.
   (forall s1 : pset 't.
   (forall s2 : pset 't.
   ((in_pset p (pset_union s1 s2)) ->
    ((in_pset p s1) \/
    (in_pset p s2))))))

axiom in_pset_union1:
   (forall p : pointer 't.
   (forall s1 : pset 't.
   (forall s2 : pset 't.
   (((in_pset p s1) \/
    (in_pset p s2)) ->
    (in_pset p (pset_union s1 s2))))))

axiom valid_pset_empty:
   (forall a : alloc_table 't.
   (valid_pset a pset_empty))

axiom valid_pset_singleton:
   (forall a : alloc_table 't.
   (forall p : pointer 't.
   ((valid_pset a (pset_singleton p)) ->
    (valid a p))))

axiom valid_pset_singleton1:
   (forall a : alloc_table 't.
   (forall p : pointer 't.
   ((valid a p) ->
    (valid_pset a (pset_singleton p)))))

axiom valid_pset_deref:
   (forall a : alloc_table 'v.
   (forall m : memory 't (pointer 'v).
   (forall q : pset 't.
   ((valid_pset a (pset_deref m q)) ->
    (forall r : pointer 't.
   (forall p : pointer 'v.
   (((in_pset r q) /\
    p = (select1 m r)) ->
    (valid a p))))))))

axiom valid_pset_deref1:
   (forall a : alloc_table 'v.
   (forall m : memory 't (pointer 'v).
   (forall q : pset 't.
   ((forall r : pointer 't.
   (forall p : pointer 'v.
   (((in_pset r q) /\
    p = (select1 m r)) ->
    (valid a p)))) ->
    (valid_pset a (pset_deref m q))))))

axiom valid_pset_range:
   (forall a : alloc_table 't.
   (forall q : pset 't.
   (forall c : int.
   (forall d : int.
   ((valid_pset a (pset_range q c d)) ->
    (forall i : int.
   (forall r : pointer 't.
   (((in_pset r q) /\
    (c <= i /\
    i <= d)) ->
    (valid a (shift r i))))))))))

axiom valid_pset_range1:
   (forall a : alloc_table 't.
   (forall q : pset 't.
   (forall c : int.
   (forall d : int.
   ((forall i : int.
   (forall r : pointer 't.
   (((in_pset r q) /\
    (c <= i /\
    i <= d)) ->
    (valid a (shift r i))))) ->
    (valid_pset a (pset_range q c d)))))))

axiom valid_pset_union:
   (forall a : alloc_table 't.
   (forall s1 : pset 't.
   (forall s2 : pset 't.
   ((valid_pset a (pset_union s1 s2)) ->
    (valid_pset a s1)))))

axiom valid_pset_union1:
   (forall a : alloc_table 't.
   (forall s1 : pset 't.
   (forall s2 : pset 't.
   ((valid_pset a (pset_union s1 s2)) ->
    (valid_pset a s2)))))

axiom valid_pset_union2:
   (forall a : alloc_table 't.
   (forall s1 : pset 't.
   (forall s2 : pset 't.
   (((valid_pset a s1) /\
    (valid_pset a s2)) ->
    (valid_pset a (pset_union s1 s2))))))

predicate not_assigns (a : alloc_table 't) (m1 : memory 't 'v) (m2 : memory 't 'v) (l : pset 't) =
   (forall p : pointer 't.
   (((valid a p) /\
    (not (in_pset p l))) ->
    (select1 m2 p) = (select1 m1 p)))

axiom not_assigns_refl:
   (forall a : alloc_table 't.
   (forall m : memory 't 'v.
   (forall l : pset 't.
   (not_assigns a m m l))))

axiom not_assigns_trans:
   (forall a : alloc_table 't.
   (forall m1 : memory 't 'v.
   (forall m2 : memory 't 'v.
   (forall m3 : memory 't 'v.
   (forall l : pset 't[(not_assigns a m1 m2 l), (not_assigns a m1 m3 l)].
   ((not_assigns a m1 m2 l) ->
    ((not_assigns a m2 m3 l) ->
    (not_assigns a m1 m3 l))))))))

function full_separated (pointer 't1) (pointer 't2) : bool

axiom full_separated_shift1:
   (forall p : pointer 'z.
   (forall q : pointer 'z.
   (forall i : int[(full_separated p q), (shift q i)].
   ((full_separated p q) ->
    (full_separated p (shift q i))))))

axiom full_separated_shift2:
   (forall p : pointer 'z.
   (forall q : pointer 'z.
   (forall i : int[(full_separated p q), (shift q i)].
   ((full_separated p q) ->
    (full_separated (shift q i) p)))))

axiom full_separated_shift3:
   (forall p : pointer 'z.
   (forall q : pointer 'z.
   (forall i : int[(full_separated q p), (shift q i)].
   ((full_separated q p) ->
    (full_separated (shift q i) p)))))

axiom full_separated_shift4:
   (forall p : pointer 'z.
   (forall q : pointer 'z.
   (forall i : int[(full_separated q p), (shift q i)].
   ((full_separated q p) ->
    (full_separated p (shift q i))))))

type tag_table 't 

type tag_id 't 

function int_of_tag (tag_id 't) : int

function typeof (tag_table 't) (pointer 't) : tag_id 't

function parenttag (tag_id 't) (tag_id 't) : bool

function subtag (tag_id 't) (tag_id 't) : bool

function subtag_bool (tag_id 't) (tag_id 't) : bool

axiom subtag_bool_def:
   (forall t1 : tag_id 't.
   (forall t2 : tag_id 't.
   ((subtag_bool t1 t2) = true ->
    (subtag t1 t2))))

axiom subtag_bool_def1:
   (forall t1 : tag_id 't.
   (forall t2 : tag_id 't.
   ((subtag t1 t2) ->
    (subtag_bool t1 t2) = true)))

axiom subtag_refl:
   (forall t : tag_id 't.
   (subtag t t))

axiom subtag_parent:
   (forall t1 : tag_id 't.
   (forall t2 : tag_id 't.
   (forall t3 : tag_id 't.
   ((subtag t1 t2) ->
    ((parenttag t2 t3) ->
    (subtag t1 t3))))))

predicate instanceof (a : tag_table 't) (p : pointer 't) (t : tag_id 't) =
   (subtag (typeof a p) t)

function downcast (tag_table 't) (pointer 't) (tag_id 't) : pointer 't

axiom downcast_instanceof:
   (forall a : tag_table 't.
   (forall p : pointer 't.
   (forall s : tag_id 't.
   ((instanceof a p s) ->
    (downcast a p s) = p))))

constant bottom_tag : tag_id 'a

axiom bottom_tag_axiom:
   (forall t : tag_id 't.
   (subtag t bottom_tag))

axiom root_subtag:
   (forall a : tag_id 't.
   (forall b : tag_id 't.
   (forall c : tag_id 't.
   ((parenttag a bottom_tag) ->
    ((parenttag b bottom_tag) ->
    ((not a = b) ->
    ((subtag c a) ->
    (not (subtag c b)))))))))

predicate fully_packed (tag_table1 : tag_table 'a) (usmutable : memory 'a (tag_id 'a)) (this : pointer 'a) =
   (select1 usmutable this) = (typeof tag_table1 this)

function bw_compl int : int

function bw_and int int : int

axiom bw_and_not_null:
   (forall a : int.
   (forall b : int.
   ((not (bw_and a b) = 0) ->
    (not a = 0))))

axiom bw_and_not_null1:
   (forall a : int.
   (forall b : int.
   ((not (bw_and a b) = 0) ->
    (not b = 0))))

function bw_xor int int : int

function bw_or int int : int

function lsl int int : int

axiom lsl_left_positive_returns_positive:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    0 <= (lsl a b))))

axiom lsl_left_positive_monotoNearestTiesToEven:
   (forall a1 : int.
   (forall a2 : int.
   (forall b : int.
   ((0 <= a1 /\
    (a1 <= a2 /\
    0 <= b)) ->
    (lsl a1 b) <= (lsl a2 b)))))

function lsr int int : int

axiom lsr_left_positive_returns_positive:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    0 <= (lsr a b))))

axiom lsr_left_positive_decreases:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    (lsr a b) <= a)))

function asr int int : int

axiom asr_positive_on_positive:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    0 <= (asr a b))))

axiom asr_decreases_on_positive:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    (asr a b) <= a)))

axiom asr_lsr_same_on_positive:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    (asr a b) = (lsr a b))))

axiom lsl_of_lsr_decreases_on_positive:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    (lsl (lsr a b) b) <= a)))

axiom lsr_of_lsl_identity_on_positive:
   (forall a : int.
   (forall b : int.
   ((0 <= a /\
    0 <= b) ->
    (lsr (lsl a b) b) = a)))

function alloc_extends (alloc_table 't) (alloc_table 't) : bool

predicate alloc_fresh (a : alloc_table 't) (p : pointer 't) (n : int) =
   (forall i : int.
   ((0 <= i /\
    i < n) ->
    (not (valid a (shift p i)))))

axiom alloc_extends_offset_min:
   (forall a1 : alloc_table 't.
   (forall a2 : alloc_table 't[(alloc_extends a1 a2)].
   ((alloc_extends a1 a2) ->
    (forall p : pointer 't.
   ((valid a1 p) ->
    (offset_min a1 p) = (offset_min a2 p))))))

axiom alloc_extends_offset_max:
   (forall a1 : alloc_table 't.
   (forall a2 : alloc_table 't[(alloc_extends a1 a2)].
   ((alloc_extends a1 a2) ->
    (forall p : pointer 't.
   ((valid a1 p) ->
    (offset_max a1 p) = (offset_max a2 p))))))

axiom alloc_extends_not_assigns_empty:
   (forall a1 : alloc_table 't.
   (forall a2 : alloc_table 't.
   (forall m1 : memory 't 'v.
   (forall m2 : memory 't 'v.
   (forall l : pset 't.
   (forall p : pointer 't.
   (forall n : int[(alloc_extends a1 a2), (alloc_fresh a1 p n), (not_assigns a2 m1 m2 l)].
   (((alloc_extends a1 a2) /\
    ((alloc_fresh a1 p n) /\
    ((not_assigns a2 m1 m2 l) /\
    (pset_included l (pset_all (pset_singleton p)))))) ->
    (not_assigns a1 m1 m2 pset_empty)))))))))

function alloc_extends_except (alloc_table 't) (alloc_table 't) (pset 't) : bool

axiom alloc_extends_except_offset_min:
   (forall a1 : alloc_table 't.
   (forall a2 : alloc_table 't.
   (forall l : pset 't[(alloc_extends_except a1 a2 l)].
   ((alloc_extends_except a1 a2 l) ->
    (forall p : pointer 't.
   (((valid a1 p) /\
    (not (in_pset p l))) ->
    (offset_min a1 p) = (offset_min a2 p)))))))

axiom alloc_extends_except_offset_max:
   (forall a1 : alloc_table 't.
   (forall a2 : alloc_table 't.
   (forall l : pset 't[(alloc_extends_except a1 a2 l)].
   ((alloc_extends_except a1 a2 l) ->
    (forall p : pointer 't.
   (((valid a1 p) /\
    (not (in_pset p l))) ->
    (offset_max a1 p) = (offset_max a2 p)))))))

type mybag 'a 

function in_mybag 'a (mybag 'a) : bool

function disj_mybag (mybag 'a) (mybag 'a) : bool

axiom disj_sym:
   (forall s1 : mybag 'a.
   (forall s2 : mybag 'a[(disj_mybag s1 s2)].
   ((disj_mybag s1 s2) ->
    (disj_mybag s2 s1))))

function sub_mybag (mybag 'a) (mybag 'a) : bool

axiom sub_refl:
   (forall sa : mybag (pointer 'a)[(sub_mybag sa sa)].
   (sub_mybag sa sa))

axiom sub_disj:
   (forall s1 : mybag 'a.
   (forall s2 : mybag 'a.
   (forall s3 : mybag 'a[(disj_mybag s1 s2), (sub_mybag s2 s3) | (disj_mybag s1 s3), (sub_mybag s2 s3)].
   ((disj_mybag s1 s2) ->
    ((sub_mybag s2 s3) ->
    (disj_mybag s1 s3))))))

axiom sub_in:
   (forall s1 : mybag 'a.
   (forall s2 : mybag 'a.
   (forall p : 'a[(in_mybag p s1), (sub_mybag s1 s2) | (in_mybag p s2), (sub_mybag s1 s2)].
   ((not (in_mybag p s2)) ->
    ((sub_mybag s1 s2) ->
    (not (in_mybag p s1)))))))

function frame_between (mybag (pointer 'a)) (memory 'a 'b) (memory 'a 'b) : bool

axiom frame_between_refl:
   (forall sa : mybag (pointer 'a).
   (forall m : memory 'a 'b[(frame_between sa m m)].
   (frame_between sa m m)))

axiom frame_between_gen:
   (forall sa : mybag (pointer 'a).
   (forall m1 : memory 'a 'b.
   (forall m2 : memory 'a 'b.
   (forall p : pointer 'a.
   (forall v : 'b[(frame_between sa m1 (store1 m2 p v))].
   ((frame_between sa m1 m2) ->
    ((in_mybag p sa) ->
    (frame_between sa (store1 m1 p v) m2))))))))

axiom frame_between_gen2:
   (forall sa : mybag (pointer 'a).
   (forall m1 : memory 'a 'b.
   (forall m2 : memory 'a 'b.
   (forall m3 : memory 'a 'b[(frame_between sa m1 m2), (frame_between sa m1 m3) | (frame_between sa m2 m3), (frame_between sa m1 m3)].
   ((frame_between sa m1 m2) ->
    ((frame_between sa m2 m3) ->
    (frame_between sa m1 m3)))))))

axiom frame_between_gen_sub1:
   (forall s12 : mybag (pointer 'a).
   (forall s23 : mybag (pointer 'a).
   (forall s13 : mybag (pointer 'a).
   (forall m1 : memory 'a 'b.
   (forall m2 : memory 'a 'b.
   (forall m3 : memory 'a 'b[(frame_between s12 m1 m2), (frame_between s13 m1 m3)].
   ((sub_mybag s12 s13) ->
    ((frame_between s12 m1 m2) ->
    ((frame_between s23 m2 m3) ->
    (frame_between s13 m1 m3))))))))))

axiom frame_between_gen_sub2:
   (forall s12 : mybag (pointer 'a).
   (forall s23 : mybag (pointer 'a).
   (forall s13 : mybag (pointer 'a).
   (forall m1 : memory 'a 'b.
   (forall m2 : memory 'a 'b.
   (forall m3 : memory 'a 'b[(frame_between s23 m2 m3), (frame_between s13 m1 m3)].
   ((frame_between s12 m1 m2) ->
    ((sub_mybag s23 s13) ->
    ((frame_between s23 m2 m3) ->
    (frame_between s13 m1 m3))))))))))

axiom frame_between_pointer:
   (forall sa : mybag (pointer 'a).
   (forall m1 : memory 'a 'b.
   (forall m2 : memory 'a 'b.
   (forall p : pointer 'a.
   ((frame_between sa m1 m2) ->
    ((not (in_mybag p sa)) ->
    (select1 m1 p) = (select1 m2 p)))))))

axiom frame_between_sub:
   (forall sa : mybag (pointer 'a).
   (forall sb : mybag (pointer 'a).
   (forall m1 : memory 'a 'b.
   (forall m2 : memory 'a 'b[(frame_between sa m1 m2), (sub_mybag sa sb)].
   ((frame_between sa m1 m2) ->
    ((sub_mybag sa sb) ->
    (frame_between sb m1 m2)))))))

type charP 

type doubleP 

type int32 

type int8 

type padding 

type voidP 

use import real.Abs as RA

predicate bounded (z_0 : real) (bound : real) =
   (RA.abs z_0) <=. bound

constant charP_tag : tag_id charP

axiom charP_int:
   (int_of_tag charP_tag) = 1

function charP_of_pointer_address (pointer tuple0) : pointer charP

axiom charP_of_pointer_address_of_pointer_addr:
   (forall p : pointer charP.
   p = (charP_of_pointer_address (pointer_address p)))

axiom charP_parenttag_bottom:
   (parenttag charP_tag bottom_tag)

axiom charP_tags:
   (forall x : pointer charP.
   (forall charP_tag_table : tag_table charP.
   (instanceof charP_tag_table x charP_tag)))

constant doubleP_tag : tag_id doubleP

axiom doubleP_int:
   (int_of_tag doubleP_tag) = 1

function doubleP_of_pointer_address (pointer tuple0) : pointer doubleP

axiom doubleP_of_pointer_address_of_pointer_addr:
   (forall p : pointer doubleP.
   p = (doubleP_of_pointer_address (pointer_address p)))

axiom doubleP_parenttag_bottom:
   (parenttag doubleP_tag bottom_tag)

axiom doubleP_tags:
   (forall x : pointer doubleP.
   (forall doubleP_tag_table : tag_table doubleP.
   (instanceof doubleP_tag_table x doubleP_tag)))

function integer_of_int32 int32 : int

predicate eq_int32 (x : int32) (y : int32) =
   (integer_of_int32 x) = (integer_of_int32 y)

function integer_of_int8 int8 : int

predicate eq_int8 (x : int8) (y : int8) =
   (integer_of_int8 x) = (integer_of_int8 y)

constant i_f : int32

function int32_of_integer int : int32

axiom int32_coerce:
   (forall x : int.
   (((-2147483648) <= x /\
    x <= 2147483647) ->
    (integer_of_int32 (int32_of_integer x)) = x))

axiom int32_extensioNearestTiesToAwaylity:
   (forall x : int32.
   (forall y : int32.
   ((integer_of_int32 x) = (integer_of_int32 y) ->
    x = y)))

axiom int32_range:
   (forall x : int32.
   (-2147483648) <= (integer_of_int32 x))

axiom int32_range1:
   (forall x : int32.
   (integer_of_int32 x) <= 2147483647)

function int8_of_integer int : int8

axiom int8_coerce:
   (forall x : int.
   (((-128) <= x /\
    x <= 127) ->
    (integer_of_int8 (int8_of_integer x)) = x))

axiom int8_extensioNearestTiesToAwaylity:
   (forall x : int8.
   (forall y : int8.
   ((integer_of_int8 x) = (integer_of_int8 y) ->
    x = y)))

axiom int8_range:
   (forall x : int8.
   (-128) <= (integer_of_int8 x))

axiom int8_range1:
   (forall x : int8.
   (integer_of_int8 x) <= 127)

predicate left_valid_struct_charP (p : pointer charP) (a : int) (charP_alloc_table : alloc_table charP) =
   (offset_min charP_alloc_table p) <= a

predicate left_valid_struct_doubleP (p : pointer doubleP) (a : int) (doubleP_alloc_table : alloc_table doubleP) =
   (offset_min doubleP_alloc_table p) <= a

predicate left_valid_struct_voidP (p : pointer voidP) (a : int) (voidP_alloc_table : alloc_table voidP) =
   (offset_min voidP_alloc_table p) <= a

axiom pointer_addr_of_charP_of_pointer_address:
   (forall p : pointer tuple0.
   p = (pointer_address (charP_of_pointer_address p)))

axiom pointer_addr_of_doubleP_of_pointer_address:
   (forall p : pointer tuple0.
   p = (pointer_address (doubleP_of_pointer_address p)))

function voidP_of_pointer_address (pointer tuple0) : pointer voidP

axiom pointer_addr_of_voidP_of_pointer_address:
   (forall p : pointer tuple0.
   p = (pointer_address (voidP_of_pointer_address p)))

predicate right_valid_struct_charP (p : pointer charP) (b : int) (charP_alloc_table : alloc_table charP) =
   b <= (offset_max charP_alloc_table p)

predicate right_valid_struct_doubleP (p : pointer doubleP) (b : int) (doubleP_alloc_table : alloc_table doubleP) =
   b <= (offset_max doubleP_alloc_table p)

predicate right_valid_struct_voidP (p : pointer voidP) (b : int) (voidP_alloc_table : alloc_table voidP) =
   b <= (offset_max voidP_alloc_table p)

predicate strict_valid_root_charP (p : pointer charP) (a : int) (b : int) (charP_alloc_table : alloc_table charP) =
   ((offset_min charP_alloc_table p) = a /\
    (offset_max charP_alloc_table p) = b)

predicate strict_valid_root_doubleP (p : pointer doubleP) (a : int) (b : int) (doubleP_alloc_table : alloc_table doubleP) =
   ((offset_min doubleP_alloc_table p) = a /\
    (offset_max doubleP_alloc_table p) = b)

predicate strict_valid_root_voidP (p : pointer voidP) (a : int) (b : int) (voidP_alloc_table : alloc_table voidP) =
   ((offset_min voidP_alloc_table p) = a /\
    (offset_max voidP_alloc_table p) = b)

predicate strict_valid_struct_charP (p : pointer charP) (a : int) (b : int) (charP_alloc_table : alloc_table charP) =
   ((offset_min charP_alloc_table p) = a /\
    (offset_max charP_alloc_table p) = b)

predicate strict_valid_struct_doubleP (p : pointer doubleP) (a : int) (b : int) (doubleP_alloc_table : alloc_table doubleP) =
   ((offset_min doubleP_alloc_table p) = a /\
    (offset_max doubleP_alloc_table p) = b)

predicate strict_valid_struct_voidP (p : pointer voidP) (a : int) (b : int) (voidP_alloc_table : alloc_table voidP) =
   ((offset_min voidP_alloc_table p) = a /\
    (offset_max voidP_alloc_table p) = b)

predicate valid_root_charP (p : pointer charP) (a : int) (b : int) (charP_alloc_table : alloc_table charP) =
   ((offset_min charP_alloc_table p) <= a /\
    b <= (offset_max charP_alloc_table p))

predicate valid_root_doubleP (p : pointer doubleP) (a : int) (b : int) (doubleP_alloc_table : alloc_table doubleP) =
   ((offset_min doubleP_alloc_table p) <= a /\
    b <= (offset_max doubleP_alloc_table p))

predicate valid_root_voidP (p : pointer voidP) (a : int) (b : int) (voidP_alloc_table : alloc_table voidP) =
   ((offset_min voidP_alloc_table p) <= a /\
    b <= (offset_max voidP_alloc_table p))

predicate valid_struct_charP (p : pointer charP) (a : int) (b : int) (charP_alloc_table : alloc_table charP) =
   ((offset_min charP_alloc_table p) <= a /\
    b <= (offset_max charP_alloc_table p))

predicate valid_struct_doubleP (p : pointer doubleP) (a : int) (b : int) (doubleP_alloc_table : alloc_table doubleP) =
   ((offset_min doubleP_alloc_table p) <= a /\
    b <= (offset_max doubleP_alloc_table p))

predicate valid_struct_voidP (p : pointer voidP) (a : int) (b : int) (voidP_alloc_table : alloc_table voidP) =
   ((offset_min voidP_alloc_table p) <= a /\
    b <= (offset_max voidP_alloc_table p))

constant voidP_tag : tag_id voidP

axiom voidP_int:
   (int_of_tag voidP_tag) = 1

axiom voidP_of_pointer_address_of_pointer_addr:
   (forall p : pointer voidP.
   p = (voidP_of_pointer_address (pointer_address p)))

axiom voidP_parenttag_bottom:
   (parenttag voidP_tag bottom_tag)

axiom voidP_tags:
   (forall x : pointer voidP.
   (forall voidP_tag_table : tag_table voidP.
   (instanceof voidP_tag_table x voidP_tag)))

axiom distr_mul_div:
   (forall x_1 : real.
   (forall y : real.
   (forall z : real.
   ((not z = 0.) ->
    ((x_1 *. y) /. z) = (x_1 *. (y /. z))))))

axiom round_add_zero:
   (forall x_0_0 : double.
   (D.round NearestTiesToEven ((D.value x_0_0) +. 0.)) = (D.value x_0_0))

axiom round_mul_zero:
   (forall x_1_0 : real.
   (D.round NearestTiesToEven (x_1_0 *. 0.)) = 0.)

type ref 'a 

function mk_ref 'a : ref 'a

function mk_ref_proj_1 (ref 'a) : 'a

axiom mk_ref_proj_1_def:
   (forall u : 'a.
   (mk_ref_proj_1 (mk_ref u)) = u)

axiom ref_inversion:
   (forall u : ref 'a.
   u = (mk_ref (mk_ref_proj_1 u)))

function contents (u : ref 'a) : 'a = (mk_ref_proj_1 u)

function div int int : int

function mod int int : int

axiom Div_mod:
   (forall x : int.
   (forall y : int.
   ((not y = 0) ->
    x = ((y * (div x y)) + (mod x y)))))

axiom Div_bound:
   (forall x : int.
   (forall y : int.
   ((0 <= x /\
    0 < y) ->
    0 <= (div x y))))

axiom Div_bound1:
   (forall x : int.
   (forall y : int.
   ((0 <= x /\
    0 < y) ->
    (div x y) <= x)))

use import int.Abs as IA

axiom Mod_bound:
   (forall x : int.
   (forall y : int.
   ((not y = 0) ->
    (-(IA.abs y)) < (mod x y))))

axiom Mod_bound1:
   (forall x : int.
   (forall y : int.
   ((not y = 0) ->
    (mod x y) < (IA.abs y))))

axiom Div_sign_pos:
   (forall x : int.
   (forall y : int.
   ((0 <= x /\
    0 < y) ->
    0 <= (div x y))))

axiom Div_sign_NearestTiesToEveng:
   (forall x : int.
   (forall y : int.
   ((x <= 0 /\
    0 < y) ->
    (div x y) <= 0)))

axiom Mod_sign_pos:
   (forall x : int.
   (forall y : int.
   ((0 <= x /\
    (not y = 0)) ->
    0 <= (mod x y))))

axiom Mod_sign_NearestTiesToEveng:
   (forall x : int.
   (forall y : int.
   ((x <= 0 /\
    (not y = 0)) ->
    (mod x y) <= 0)))

axiom Rounds_toward_zero:
   (forall x : int.
   (forall y : int.
   ((not y = 0) ->
    (IA.abs ((div x y) * y)) <= (IA.abs x))))

axiom Div_1:
   (forall x : int.
   (div x 1) = x)

axiom Mod_1:
   (forall x : int.
   (mod x 1) = 0)

axiom Div_inf:
   (forall x : int.
   (forall y : int.
   ((0 <= x /\
    x < y) ->
    (div x y) = 0)))

axiom Mod_inf:
   (forall x : int.
   (forall y : int.
   ((0 <= x /\
    x < y) ->
    (mod x y) = x)))

axiom Div_mult:
   (forall x : int.
   (forall y : int.
   (forall z : int[(div ((x * y) + z) x)].
   ((0 < x /\
    (0 <= y /\
    0 <= z)) ->
    (div ((x * y) + z) x) = (y + (div z x))))))

axiom Mod_mult:
   (forall x : int.
   (forall y : int.
   (forall z : int[(mod ((x * y) + z) x)].
   ((0 < x /\
    (0 <= y /\
    0 <= z)) ->
    (mod ((x * y) + z) x) = (mod z x)))))

predicate single_of_double_post (m : mode) (x : double) (res : single) =
   ((S.value res) = (S.round m (D.value x)) /\
    ((S.exact res) = (D.exact x) /\
    (S.model res) = (D.model x)))

predicate nearestTiesToEveng_single_post (x : single) (res : single) =
   ((S.value res) = (-.(S.value x)) /\
    ((S.exact res) = (-.(S.exact x)) /\
    (S.model res) = (-.(S.model x))))

predicate add_single_post (m : mode) (x : single) (y : single) (res : single) =
   ((S.value res) = (S.round m ((S.value x) +. (S.value y))) /\
    ((S.exact res) = ((S.exact x) +. (S.exact y)) /\
    (S.model res) = ((S.model x) +. (S.model y))))

predicate sub_single_post (m : mode) (x : single) (y : single) (res : single) =
   ((S.value res) = (S.round m ((S.value x) -. (S.value y))) /\
    ((S.exact res) = ((S.exact x) -. (S.exact y)) /\
    (S.model res) = ((S.model x) -. (S.model y))))

predicate mul_single_post (m : mode) (x : single) (y : single) (res : single) =
   ((S.value res) = (S.round m ((S.value x) *. (S.value y))) /\
    ((S.exact res) = ((S.exact x) *. (S.exact y)) /\
    (S.model res) = ((S.model x) *. (S.model y))))

predicate div_single_post (m : mode) (x : single) (y : single) (res : single) =
   ((S.value res) = (S.round m ((S.value x) /. (S.value y))) /\
    ((S.exact res) = ((S.exact x) /. (S.exact y)) /\
    (S.model res) = ((S.model x) /. (S.model y))))

predicate nearestTiesToEveng_double_post (x : double) (res : double) =
   ((D.value res) = (-.(D.value x)) /\
    ((D.exact res) = (-.(D.exact x)) /\
    (D.model res) = (-.(D.model x))))

predicate add_double_post (m : mode) (x : double) (y : double) (res : double) =
   ((D.value res) = (D.round m ((D.value x) +. (D.value y))) /\
    ((D.exact res) = ((D.exact x) +. (D.exact y)) /\
    (D.model res) = ((D.model x) +. (D.model y))))

predicate sub_double_post (m : mode) (x : double) (y : double) (res : double) =
   ((D.value res) = (D.round m ((D.value x) -. (D.value y))) /\
    ((D.exact res) = ((D.exact x) -. (D.exact y)) /\
    (D.model res) = ((D.model x) -. (D.model y))))

predicate mul_double_post (m : mode) (x : double) (y : double) (res : double) =
   ((D.value res) = (D.round m ((D.value x) *. (D.value y))) /\
    ((D.exact res) = ((D.exact x) *. (D.exact y)) /\
    (D.model res) = ((D.model x) *. (D.model y))))

predicate div_double_post (m : mode) (x : double) (y : double) (res : double) =
   ((D.value res) = (D.round m ((D.value x) /. (D.value y))) /\
    ((D.exact res) = ((D.exact x) /. (D.exact y)) /\
    (D.model res) = ((D.model x) /. (D.model y))))

predicate double_of_real_post (m : mode) (x : real) (res : double) =
   ((D.value res) = (D.round m x) /\
    ((D.exact res) = x /\
    (D.model res) = x))

predicate double_of_single_post (x : single) (res : double) =
   ((D.value res) = (S.value x) /\
    ((D.exact res) = (S.exact x) /\
    (D.model res) = (S.model x)))

constant charP_alloc_table : ref (alloc_table charP)

constant charP_tag_table : ref (tag_table charP)

constant doubleP_alloc_table : ref (alloc_table doubleP)

constant doubleP_tag_table : ref (tag_table doubleP)

constant voidP_alloc_table : ref (alloc_table voidP)

constant voidP_tag_table : ref (tag_table voidP)

goal WP_parameter__InterPolate_ensures_default:
   (forall x_0 : double.
   (forall usX : pointer doubleP.
   (forall usY : pointer doubleP.
   (forall usV : pointer doubleP.
   (forall n : int32.
   (forall i : int32.
   (forall doubleP_X_1_alloc_table : alloc_table doubleP.
   (forall doubleP_Y_2_alloc_table : alloc_table doubleP.
   (forall doubleP_V_3_alloc_table : alloc_table doubleP.
   (forall doubleP_doubleM_X_1 : memory doubleP double.
   (forall doubleP_doubleM_Y_2 : memory doubleP double.
   (forall doubleP_doubleM_V_3 : memory doubleP double.
   ((3 <= (integer_of_int32 n) /\
    ((integer_of_int32 n) <= 17 /\
    (0 <= (integer_of_int32 i) /\
    ((integer_of_int32 i) < (integer_of_int32 n) /\
    ((offset_min doubleP_X_1_alloc_table usX) <= 0 /\
    ((integer_of_int32 n) <= (offset_max doubleP_X_1_alloc_table usX) /\
    ((offset_min doubleP_Y_2_alloc_table usY) <= 0 /\
    ((integer_of_int32 n) <= (offset_max doubleP_Y_2_alloc_table usY) /\
    ((offset_min doubleP_V_3_alloc_table usV) <= 0 /\
    ((integer_of_int32 n) <= (offset_max doubleP_V_3_alloc_table usV) /\
    ((bounded (D.value x_0) 8.) /\
    ((forall k : int.
   ((0 <= k /\
    k <= (integer_of_int32 n)) ->
    (bounded (D.value (select1 doubleP_doubleM_X_1 (shift usX k))) 8.))) /\
    ((forall k_0 : int.
   ((0 <= k_0 /\
    k_0 <= (integer_of_int32 n)) ->
    (bounded (D.value (select1 doubleP_doubleM_Y_2 (shift usY k_0))) 8.))) /\
    (forall k_1 : int.
   ((0 <= k_1 /\
    k_1 <= (integer_of_int32 n)) ->
    (bounded (D.value (select1 doubleP_doubleM_V_3 (shift usV k_1))) 8.)))))))))))))))) ->
    ((bounded (D.value x_0) 8.) /\
    ((bounded (D.value (select1 doubleP_doubleM_X_1 (shift usX (integer_of_int32 i)))) 8.) /\
    ((bounded (D.value (select1 doubleP_doubleM_Y_2 (shift usY (integer_of_int32 i)))) 8.) /\
    (bounded (D.value (select1 doubleP_doubleM_V_3 (shift usV (integer_of_int32 i)))) 8.)))))))))))))))))

end